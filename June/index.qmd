---
title: "TidyTuesday"
author: "Arindom Baruah"
date: "2024-01-25"
categories: [R,data cleaning,exploratory data analysis,high dimensional data visualisation,model metrics, principal decomposition, non-linear decomposition]
quarto-required: ">=1.3.0"
format:
    html:
        output-file: post.html
execute: 
  echo: false
  message: false
  warning: false
number-sections: true
---


```{r}

library(tidyverse)
library(tidymodels)
library(ggplot2)
library(kableExtra)
library(caret)
library(plotROC)
library(mulgar)
library(tourr)
library(GGally)
library(uwot)
library(animation)
library(magick)
library(ggfortify)
library(ggrepel)
library(FunnelPlotR)
library(ggfunnel)
library(waffle)
```






# TidyTuesdayR data

```{r}

# Option 1: tidytuesdayR package 
## install.packages("tidytuesdayR")

tuesdata <- tidytuesdayR::tt_load('2024-06-25')
## OR
tuesdata <- tidytuesdayR::tt_load(2024, week = 26)

lgbtq_movies <- tuesdata$lgbtq_movies

# Option 2: Read directly from GitHub

lgbtq_movies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-06-25/lgbtq_movies.csv')


```







```{r}
ggplot(data = top_langs,aes(x = original_language, y = Total)) + geom_col()
```

















---------
```{r}


library(tidyverse)
library(here)
library(fs)
pak::pak("r4ds/ttmeta")
library(ttmeta)

tt_summary <- ttmeta::tt_summary_tbl |> 
  dplyr::select(-dplyr::ends_with("urls"))

tt_urls <- ttmeta::tt_urls_tbl |> 
  dplyr::mutate(
    query = purrr::map_chr(
      query,
      \(x) {
        if (!length(x)) {
          return(NA_character_)
        }
        paste0(names(x), "=", x, collapse = "&")
      }
    )
  )

tt_datasets <- ttmeta::tt_datasets_metadata |> 
  dplyr::filter(!is.na(dataset_name)) |> 
  dplyr::select(-variable_details)

tt_variables <- ttmeta::tt_datasets_metadata |> 
  dplyr::filter(!is.na(dataset_name)) |> 
  dplyr::select(-variables, -observations) |> 
  tidyr::unnest(variable_details) |> 
  dplyr::mutate(
    min = purrr::map_chr(
      min,
      \(x) {
        if (!length(x)) {
          return(NA_character_)
        }
        as.character(x)
      }
    ),
    max = purrr::map_chr(
      max,
      \(x) {
        if (!length(x)) {
          return(NA_character_)
        }
        as.character(x)
      }
    )
  )
```

```{r}

tt_datasets_grouped = tt_datasets %>% group_by(year) %>% summarise(Total_datasets = n())
ggplot(data=tt_datasets_grouped,aes(x = year,y = Total_datasets)) + geom_col()

```
```{r}
pl <- ratio_df %>% drop_na() %>% ggplot(aes(x = year,y = n)) + 
  geom_col() + facet_wrap(~status) + labs(x = "Year", 
                                          y = "Number of datasets", 
                                          title = "Total number of datasets of each type in TidyTuesdayR") + theme_classic()
ggsave("Tidytuesday.png",pl,dpi = 300,height = 8, width = 8)
```




```{r}

ratio_df_grouped <- ratio_df %>% group_by(year,status) %>% summarise(total = sum(n))
ggplot(ratio_df,aes(x = year,))
```

```{r theme}

library(tidyverse)
library(stringr)
library(glue)
library(ggrepel)
library(ggplot2)
library(ggtext)
library(sysfonts)
library(showtext)


# caption handles
swd <- str_glue("#SWDchallenge: June 2024 &bull; Source: Synthetic data from ChatGPT<br>")  
li <- str_glue("<span style='font-family:fa6-brands'>&#xf08c;</span>")  
gh <- str_glue("<span style='font-family:fa6-brands'>&#xf09b;</span>")
mn <- str_glue("<span style='font-family:fa6-brands'>&#xf4f6;</span>")


# plot colors
bkg_col      <- colorspace::lighten("#f2f5e5", 0.05)    
title_col    <- "#3d3d3d"           
subtitle_col <- "#3d3d3d"     
caption_col  <- "#72647D"   
text_col     <- colorspace::darken("gray40" , 0.2)  

# fonts

font_add('fa6-brands','fontawesome/otfs/Font Awesome 6 Brands-Regular-400.otf') 
font_add_google("Oswald", regular.wt = 400, family = "title")                 
font_add_google("Quattrocento Sans", regular.wt = 400, family = "subtitle")  
font_add_google("Quattrocento Sans", regular.wt = 400, family = "text")        
font_add_google("Merriweather", regular.wt = 400,family = "caption")
showtext_auto(enable = TRUE)  

# Plot texts

title_text <- "Understanding Dataset Dimensionality \n Across TidyTuesdayR: A Visual Exploration"

subtitle_text <- "The ratio of number of observations (n) to variables (p) indicates the dimensionality of the dataset.<br> Datasets with less observations than the available variables are problematic to analyse.<br> On the other hand,as the number of variables increases, the volume of the space increases exponentially, making data analysis more complex and less intuitive. This is commonly termed as the __curse of dimensionality__"


X_icon <- glue("<span style='font-family:fa6-brands'>&#xe61b;</span>")

caption_text <- str_glue("{li} Arindam Baruah | {X_icon} @wizsights | {gh} arinbaruah | Source: TidyTuesday |#rstudio #gg_waffle #ggplot2")

theme_set(theme_minimal(base_size = 15, base_family = "text"))                

# Theme updates

theme_update(
  plot.title.position   = "plot",
  plot.caption.position = "plot",
  legend.position       = 'plot',
  plot.margin           = margin(t = 10, r = 15, b = 0, l = 15),
  plot.background       = element_rect(fill = bkg_col, color = bkg_col),
  panel.background      = element_rect(fill = bkg_col, color = bkg_col),
  axis.title.x          = element_text(margin = margin(10, 0, 0, 0), size = rel(1), color = text_col, family = 'text', face = 'bold'),
  axis.title.y          = element_text(margin = margin(0, 10, 0, 0), size = rel(1), color = text_col, family = 'text', face = 'bold'),
  axis.text             = element_text(size = 10, color = text_col, family = 'text',face = "bold"),
  panel.grid.minor.y    = element_blank(),
  panel.grid.major.y    = element_line(linetype = "dotted", linewidth = 0.1, color = 'gray40'),
  panel.grid.minor.x    = element_blank(),
  panel.grid.major.x    = element_blank(),
  axis.line.x           = element_line(color = "#d7d7d8", linewidth = .2),
)

 

```


# June 

```{r}
lgbtq_movies

top_langs <- lgbtq_movies %>% group_by(original_language) %>% summarise(Total = n()) %>% arrange(-Total) %>% head(6)
lgbtq_movies <- lgbtq_movies %>% filter(original_language %in% top_langs$original_language)
```





```{r}


lgbtq_colors <- c("#FF0018", "#FFA52C", "#FFFF41", "#008018", "#0000F9", "#86007D", "#8B4513", "#FFD700")


title_text <- "Average vote score distribution by language in LGBTQ+ Movies"

ggplot(data = lgbtq_movies,aes(x = vote_average,fill = original_language)) + 
  geom_density(alpha =0.9) + 
  scale_fill_manual(values = lgbtq_colors) +
  facet_wrap(~original_language,
             ncol = 2) +
  labs(x = "Average Vote Score",
       y="",
       title = title_text) +
  theme(
    axis.text.y = element_blank(),
    plot.title        = element_text(
      size                = rel(1.3),
      family              = "title",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ))

```

```{r}
lgbtq_movies <- lgbtq_movies %>% mutate(original_lang = case_when(original_language == "en" ~ "English",
                                                  original_language == "pt" ~ "Portugese",
                                                  original_language == "ja" ~ "Japanese",
                                                  original_language == "fr" ~ "French",
                                                  original_language == "es" ~ "Spanish",
                                                  original_language == "de" ~ "German",
                                                  .default = original_language))
```




```{r}
lgbtq_colors <- c("#FF0018", "#FFA52C", "#FFFF41", "#008018", "#0000F9", "#86007D", "#8B4513", "#FFD700")

title_text <- "Average vote score distribution by language in LGBTQ+ Movies"


subtitle_text <- "Visualizing the average vote scores across LGBTQ+ categorized movies based on their respective languages reveals <br> an intriguing pattern. The overall distribution of vote scores appears to be <strong><span style='color: darkred;'>bimodal</span></strong>, with noticeable peaks at scores <br> of 0 and 6. This suggests that viewers tend to either strongly dislike these movies or find them to be average. <br> Additionally, it's interesting to note that <strong> English-language </strong> movies exhibit a higher frequency of low scores compared <br> to movies in other languages. This may indicate differing audience preferences or varying production quality <br> across different language groups."

caption_text <- str_glue("{li} Arindam Baruah | {X_icon} @wizsights | {gh} arinbaruah | Source: TidyTuesday |#rstudio #ggplot2")

pl <- lgbtq_movies %>% ggplot(aes(vote_average,original_lang)) + 
  geom_density_ridges(aes(fill = factor(original_lang)), color = "grey30", linewidth = .25, alpha = .9) +
  scale_fill_manual(values = lgbtq_colors) +
  geom_vline(xintercept = c(0,5,10), linewidth = .3, linetype = "dotted", lineend = "round",alpha = 0.5) +
  labs(x = "Average Vote Score",
       y="",
       title = title_text,
       subtitle = subtitle_text,
       caption = caption_text) +
  theme(
    
     axis.text.x        = element_text(
      size                = rel(1.5),
      family              = "text",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),
    axis.text        = element_text(
      size                = rel(1.8),
      family              = "text",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),
    axis.title        = element_text(
      size                = rel(1.5),
      family              = "text",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),
    plot.title        = element_text(
      size                = rel(4),
      family              = "title",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),
    plot.subtitle         = element_markdown(
      size                = rel(2), 
      family              = 'subtitle',
      color               = subtitle_col,
      hjust               = 0,
      lineheight          = 0.4, 
      margin              = margin(t = 5, b = 1)
    ),
    plot.caption          = element_markdown(
      size                = rel(1.5), 
      family              = 'caption',
      color               = caption_col,
      lineheight          = 0.6,
      hjust               = 0.5,
      halign              = 0,
      margin              = margin(t = 10, b = 10)
    )) 
pl
ggsave("lgbtq_density_plot.png", plot = pl)
```



# July


```{r}
# Preparing data

var_order <- c("Upto 6 variables",
               "7-15 variables",
               "Greater than 15 variables")
tt_grouped_df <- tt_datasets %>% group_by(year,week) %>% mutate(variable_category = case_when(variables <= 6 ~ "Upto 6 variables",
                                                                              variables > 6 & variables <=15 ~ "7-15 variables",
                                                                              variables > 15  ~ "Greater than 15 variables"))  %>%
                                                                              mutate(variable_category = factor(variable_category, levels = var_order))

variable_df <- tt_grouped_df %>%
  group_by(year,variable_category) %>% count()  %>%
  ungroup() %>%
  arrange(year, variable_category)



tt_grouped_ratio_df <- tt_datasets %>% group_by(year,week) %>% mutate(ratio = observations/variables)

status_order <- c(
  "Problematic datasets (< 1)",
  "Low dimensional (> 20)",
  "Moderate dimensional (10-15)",
  "High dimensional (<= 10)"
)

tt_grouped_ratio_df <- tt_grouped_ratio_df %>% mutate(status = case_when(ratio <= 1 ~ "Problematic datasets (< 1)",
                                                                         ratio <= 10 ~ "High dimensional (<= 10)",
                                                                         ratio > 10 & ratio <=15 ~ "Moderate dimensional (10-15)",
                                                                         ratio > 20 ~ "Low dimensional (> 20)")) %>%
                                                                         mutate(status = factor(status, levels = status_order))
ratio_df <- tt_grouped_ratio_df %>%
  group_by(year, status) %>%
  count() %>%
  ungroup() %>%
  arrange(year, status)

```

```{r}

subtitle_text <- "The ratio of number of observations (n) to variables (p) indicates the dimensionality of the dataset.<br> Datasets with less observations than the available variables are problematic to analyse.<br> On the other hand,as the number of variables increases, the volume of the space increases exponentially, <br> making data analysis more complex and less intuitive. This is commonly termed as the __curse of dimensionality.__"

waffle_box <- c("#CF352E", "#e6bc00", "#3a9234","#FB8B23")

dim_order <- c("Problematic datasets (< 1)","Low dimensional (> 20)","Moderate dimensional (10-15)", "High dimensional (<= 10)")

ratio_df$status <- factor(ratio_df$status, levels = dim_order)

dimensional_waffle <- ggplot(data = ratio_df,aes(fill = status, values = n)) +
  geom_waffle(color = text_col, size = .1, flip = TRUE) +
  facet_wrap(~year, nrow = 1, strip.position = "bottom") +
  scale_x_discrete() +
  scale_y_continuous(
   labels = function(x) x * 10,   # 10 observations per row
    expand = c(0, 0)
  ) +
  scale_fill_manual(values = waffle_box) +
  labs(
  title = title_text,
  fill = "",
   y = "Number of datasets",
  subtitle = subtitle_text,
  caption = caption_text) + 
  theme(legend.position = "top",
    legend.title.position = "top",
    legend.title = element_text(
      color = text_col,
      hjust = 0.5,
      family = "text",
      face = "bold",
      size = 7,
    ),
    legend.text = element_text(
      color = text_col,
      family = "text",
      size = 7,
      face = "bold"
    ),
    plot.title            = element_text(
      size                = rel(1.3),
      family              = "title",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),        
    plot.subtitle         = element_markdown(
      size                = rel(0.66), 
      family              = 'subtitle',
      color               = subtitle_col,
      hjust               = 0,
      lineheight          = 1.4, 
      margin              = margin(t = 5, b = 1)
    ),
      plot.caption          = element_markdown(
      size                = rel(0.5), 
      family              = 'caption',
      color               = caption_col,
      lineheight          = 0.6,
      hjust               = 0.5,
      halign              = 0,
      margin              = margin(t = 10, b = 10)
    ),
    axis.title.y = element_text(size = 10,
                                family = "text")
  ) + coord_equal()



dimensional_waffle

```



```{r}

title_text <- "How wide are the datasets in TidyTuesdayR repository?"
subtitle_text <- "Wide datasets typically have more than 10 variables. With more number of variables, the curse of <br> dimensionality starts creeping in!"
waffle_box <- c("#ff6037", "#e6bc00", "#3a9234")

dim_order <- c("Upto 6 variables", "7-15 variables", "Greater than 15 variables")

variable_df$variable_category <- factor(variable_df$variable_category, levels = dim_order)

variable_waffle <- ggplot(data = variable_df,aes(fill = variable_category, values = n)) +
  geom_waffle(color = text_col, size = .15, flip = TRUE) +
  facet_wrap(~year, nrow = 1, strip.position = "bottom") +
  scale_x_discrete() +
  scale_y_continuous(
   labels = function(x) x * 10,   # 10 observations per row
    expand = c(0, 0)
  ) +
  scale_fill_manual(values = waffle_box) +
  labs(
  title = title_text,
  fill = "",
   y = "Number of datasets",
  subtitle = subtitle_text,
  caption = caption_text) + 
  theme(legend.position = "top",
    legend.title.position = "top",
    legend.title = element_text(
      color = text_col,
      hjust = 0.5,
      family = "text",
      face = "bold",
      size = 14.5,
    ),
    legend.text = element_text(
      color = text_col,
      family = "text",
      size = 10
    ),
    plot.title            = element_text(
      size                = rel(1.3),
      family              = "title",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),        
    plot.subtitle         = element_markdown(
      size                = rel(0.66), 
      family              = 'subtitle',
      color               = subtitle_col,
      hjust               = 0,
      lineheight          = 1.4, 
      margin              = margin(t = 5, b = 1)
    ),
      plot.caption          = element_markdown(
      size                = rel(0.5), 
      family              = 'caption',
      color               = caption_col,
      lineheight          = 0.6,
      hjust               = 0.5,
      halign              = 0,
      margin              = margin(t = 10, b = 10)
    )
  ) + coord_equal()



variable_waffle

```


```{r}
library(data.table)
library(stringr)

library(ggplot2)
library(ggtext)

library(ggridges)
library(ggh4x)

library(paletteer)
library(colorspace)
library(extrafont)

title_text <- "How wide and long are the datasets in TidyTuesdayR?"

subtitle_text <- "The dimensions of a dataset can indicate its important characteristics. Datasets with much more number of observations <br> than variables are termed as __long datasets__ while those with sizeable number of variables are termed as __wide datasets__."

tt_grouped_ratio_df <- tt_grouped_ratio_df %>% mutate(status = case_when(ratio <= 1 ~ "Problematic datasets (< 1)",
                                                                         ratio <= 10 ~ "High dimensional (<= 10)",
                                                                         ratio > 10 & ratio <=15 ~ "Moderate dimensional (10-15)",
                                                                         ratio > 20 ~ "Low dimensional (> 20)")) %>%
                                                                         mutate(status = factor(status, levels = status_order))
ratio_df <- tt_grouped_ratio_df %>%
  group_by(year, status) %>%
  count() %>%
  ungroup() %>%
  arrange(year, status)

options(scipen = 99)

tt_grouped_ratio_df <- tt_grouped_ratio_df %>% rename("Variables" = "variables",
                                                      "Observations" = "observations")

tt_datasets_long <- tt_grouped_ratio_df %>% 
  pivot_longer(cols = Variables:Observations,
               names_to = "type",values_to = "number") %>% filter(number < 250000)


gr =  tt_datasets_long  %>% drop_na() |>
    ggplot(aes(number, factor(year))) +
    geom_density_ridges(aes(fill = factor(year)), color = "grey30", linewidth = .25, alpha = .9) +
    geom_vline(xintercept = c(0,6,15), linewidth = .3, linetype = "dotted", lineend = "round") +
    facet_wrap(vars(type),scales= "free_x",nrow=1) +
    
    scale_fill_manual(values = paletteer_d("ggthemes::Tableau_20"), guide = "none") +
    scale_color_manual(values = paletteer_d("ggthemes::Tableau_20") |> darken(.25), guide = "none") +
    
    #scale_x_continuous(breaks = seq(1, 50,5), limits = c(-1, 50), expand = c(0, 0)) +
    
    theme_minimal(base_family = "text") +
    labs( title = title_text,
          x = "Dimension of dataset",
          y = "",
  subtitle = subtitle_text,
  caption = caption_text) + 
  theme(legend.position = "top",
    legend.title.position = "top",
    legend.title = element_text(
      color = text_col,
      hjust = 0.5,
      family = "text",
      face = "bold",
      size = 7,
    ),
    legend.text = element_text(
      color = text_col,
      family = "text",
      size = 7,
      face = "bold"
    ),
    plot.title            = element_text(
      size                = rel(1.3),
      family              = "title",
      face                = "bold",
      color               = title_col,
      lineheight          = 1.1,
      margin              = margin(t = 5, b = 5),
      hjust               = 0.5
    ),        
    plot.subtitle         = element_markdown(
      size                = rel(0.8), 
      family              = 'subtitle',
      color               = subtitle_col,
      hjust               = 0,
      lineheight          = 1.4, 
      margin              = margin(t = 5, b = 1)
    ),
      plot.caption          = element_markdown(
      size                = rel(0.7), 
      family              = 'caption',
      color               = caption_col,
      lineheight          = 0.6,
      hjust               = 0.5,
      halign              = 0,
      margin              = margin(t = 10, b = 10)
    ),
    axis.title.y = element_text(size = 10,
                                family = "text")
  ) 
gr

```
```{r}
ggplot(tt_datasets,aes(x = observations)) + geom_boxplot()
```

# Week 2 July

```{r}

drob_funs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-09/drob_funs.csv')
drob_funs
```

```{r}
# Install and load the networkD3 package
library(networkD3)

# Create a data frame for nodes
nodes <- data.frame(
  name = c("Source A", "Source B", "Intermediate 1", "Intermediate 2", "Destination 1", "Destination 2")
)

# Create a data frame for links
links <- data.frame(
  source = c(0, 1, 0, 2, 3, 3),
  target = c(2, 2, 3, 4, 4, 5),
  value = c(10, 20, 30, 40, 20, 10)
)

# Generate the Sankey diagram
sankeyNetwork(Links = links, Nodes = nodes, Source = "source", Target = "target", Value = "value", NodeID = "name", units = "TWh", fontSize = 12, nodeWidth = 30)

```


```{r}
# Install and load the necessary packages

library(ggplot2)
library(ggalluvial)

# Create a data frame for the alluvial plot
alluvial_data <- data.frame(
  source = c("Source A", "Source A", "Source B", "Source B", "Intermediate 1", "Intermediate 2"),
  target = c("Intermediate 1", "Intermediate 2", "Intermediate 1", "Intermediate 2", "Destination 1", "Destination 2"),
  value = c(10, 30, 20, 40, 60, 10)
)

# Create the alluvial plot
ggplot(alluvial_data,
       aes(axis1 = source, axis2 = target, y = value)) +
  geom_alluvium(aes(fill = source), width = 1/12) +
  geom_stratum(width = 1/12, fill = "black", color = "grey") +
  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
  scale_x_discrete(limits = c("Source", "Target"), expand = c(0.15, 0.05)) +
  labs(title = "Alluvial Plot", x = "Stage", y = "Value") +
  theme_minimal()

```


